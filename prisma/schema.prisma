// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum transactionType {
  Revenue
  Expense
  Transfer
}

// duong
model Role {
  id        Int       @id @default(autoincrement())
  name      String    @default("User")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  User      User[]
}

// done
model User {
  id              Int               @id @default(autoincrement())
  username        String
  email           String            @unique
  password        String
  name            String?
  note            String?
  ownership_role  Role              @relation(fields: [role_id], references: [id])
  role_id         Int               @default(1)
  avatar          String?
  refresh_token   String?           @db.LongText
  status          Int               @default(1)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  deletedAt       DateTime?
  deleteMark      Boolean           @default(false)
  Wallet          Wallet[]
  Transaction     Transaction[]
  CategoriesGroup CategoriesGroup[]
  category        Category[]
  monthlyBudget   MonthlyBudget[]
  Statistics      Statistics[]
}

model Statistics {
  id               Int       @id @default(autoincrement())
  recordDate       DateTime  @default(now())
  expense          Int?
  revenue          Int?
  ownership_user   User      @relation(fields: [user_id], references: [id])
  user_id          Int
  ownership_wallet Wallet    @relation(fields: [wallet_id], references: [id])
  wallet_id        Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?
  deleteMark       Boolean   @default(false)
}

//duong
model Wallet {
  id             Int           @id @default(autoincrement())
  name           String
  amount         Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  deletedAt      DateTime?
  deleteMark     Boolean       @default(false)
  user_id        Int
  ownership_user User          @relation(fields: [user_id], references: [id])
  Transaction    Transaction[]
  Statistics     Statistics[]
}

// duong
model Currency {
  id            Int           @id @default(autoincrement())
  name          String
  exchange_rate Float?
  symbol        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  deletedAt     DateTime?
  deleteMark    Boolean       @default(false)
  Transaction   Transaction[]
}

model Transaction {
  id                        Int             @id @default(autoincrement())
  recordDate                DateTime        @default(now())
  transactionType           transactionType
  bill                      Int
  note                      String
  paymentImage              String?
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime?       @updatedAt
  deletedAt                 DateTime?
  deleteMark                Boolean         @default(false)
  ownership_user            User            @relation(fields: [user_id], references: [id])
  user_id                   Int
  ownership_wallet          Wallet          @relation(fields: [wallet_id], references: [id])
  wallet_id                 Int
  ownership_category        Category        @relation(fields: [category_id], references: [id])
  category_id               Int
  ownership_currency        Currency        @relation(fields: [currency_id], references: [id])
  currency_id               Int
  ownership_categoriesGroup CategoriesGroup @relation(fields: [categoriesGroup_id], references: [id])
  categoriesGroup_id        Int
}

// done
model CategoriesGroup {
  id             Int           @id @default(autoincrement())
  ownership_user User          @relation(fields: [user_id], references: [id])
  user_id        Int
  name           String
  note           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  deletedAt      DateTime?
  deleteMark     Boolean       @default(false)
  Transaction    Transaction[]
  category       Category[]
}

// done
model Category {
  id                        Int             @id @default(autoincrement())
  name                      String
  symbol                    String?
  ownership_user            User            @relation(fields: [user_id], references: [id])
  user_id                   Int
  ownership_categoriesGroup CategoriesGroup @relation(fields: [categoriesGroup_id], references: [id])
  categoriesGroup_id        Int
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime?       @updatedAt
  deletedAt                 DateTime?
  deleteMark                Boolean         @default(false)
  MonthlyBudget             MonthlyBudget[]
  Transaction               Transaction[]
}

model MonthlyBudget {
  id                 Int       @id @default(autoincrement())
  ownership_user     User      @relation(fields: [user_id], references: [id])
  user_id            Int
  ownership_category Category  @relation(fields: [category_id], references: [id])
  category_id        Int
  amount             Int
  note               String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  deletedAt          DateTime?
  deleteMark         Boolean   @default(false)
}
